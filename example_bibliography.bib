@Book{rantaTT,
  author = {Ranta , Aarne}, 
  title = {{gf-contrib/typetheory}},
  year = 2013,
  publisher = {\url{https://github.com/GrammaticalFramework/gf-contrib/tree/master/typetheory}}
}

@Book{warrickHarper,
  author = {Macmillan , Warrick}, 
  title = {{GF-Typechecker}},
  year = 2020,
  publisher = {\url{https://github.com/wmacmil/GF_Typechecker}}
}


@article{rantaForsberg,
author = {Forsberg, Markus and Ranta, Aarne},
title = {Functional Morphology},
year = {2004},
issue_date = {September 2004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/1016848.1016879},
doi = {10.1145/1016848.1016879},
abstract = {This paper presents a methodology for implementing natural language morphology in
the functional language Haskell. The main idea behind is simple: instead of working
with untyped regular expressions, which is the state of the art of morphology in computational
linguistics, we use finite functions over hereditarily finite algebraic datatypes.
The definitions of these datatypes and functions are the language-dependent part of
the morphology. The language-independent part consists of an untyped dictionary format
which is used for synthesis of word forms, and a decorated trie, which is used for
analysis.Functional Morphology builds on ideas introduced by Huet in his computational
linguistics toolkit Zen, which he has used to implement the morphology of Sanskrit.
The goal has been to make it easy for linguists, who are not trained as functional
programmers, to apply the ideas to new languages. As a proof of the productivity of
the method, morphologies for Swedish, Italian, Russian, Spanish, and Latin have already
been implemented using the library. The Latin morphology is used as a running example
in this article.},
journal = {SIGPLAN Not.},
month = sep,
pages = {213–223},
numpages = {11},
keywords = {finite functions, functional programming, linguistics, morphological description, embedded languages}
}

@article{ranta_2004, title={Grammatical Framework}, volume={14}, DOI={10.1017/S0956796803004738}, number={2}, journal={Journal of Functional Programming}, publisher={Cambridge University Press}, author={RANTA, AARNE}, year={2004}, pages={145–189}}

@article{ljunglof2004expressivity,
  title={Expressivity and complexity of the Grammatical Framework},
  author={Ljungl{\"o}f, Peter},
  year={2004}
}

@inproceedings{alfaGF,
author = {Hallgren, Thomas and Ranta, Aarne},
title = {An Extensible Proof Text Editor},
year = {2000},
isbn = {3540412859},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {The paper presents an extension of the proof editor Alfa with natural-language input
and output. The basis of the new functionality is an automatic translation to syntactic
structures that are closer to natural language than the type-theoretical syntax of
Alfa. These syntactic structures are mapped into texts in languages such as English,
French, and Swedish. In this way, every theory, definition, proposition, and proof
in Alfa can be translated into a text in any of these languages. The translation is
defined for incomplete proof objects as well, so that a text with "holes" (i.e. metavariables)
in it can be viewed simultaneously with a formal proof constructed. The mappings into
natural language also work in the parsing direction, so that input can be given to
the proof editor in a natural language.The natural-language interface is implemented
using the Grammatical Framework GF, so that it is possible to change and extend the
interface without recompiling the proof editor. Such extensions can be made on two
dimensions: by adding new target languages, and by adding theory-specific grammatical
annotations to make texts more idiomatic.},
booktitle = {Proceedings of the 7th International Conference on Logic for Programming and Automated Reasoning},
pages = {70–84},
numpages = {15},
location = {Reunion Island, France},
series = {LPAR'00}
}

@InProceedings{ranta93,
author="Ranta, Aarne",
editor="Barendregt, Henk
and Nipkow, Tobias",
title="Type theory and the informal language of mathematics",
booktitle="Types for Proofs and Programs",
year="1994",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="352--365",
isbn="978-3-540-48440-0"
}

@Inbook{Montague1973,
author="Montague, Richard",
editor="Hintikka, K. J. J.
and Moravcsik, J. M. E.
and Suppes, P.",
title="The Proper Treatment of Quantification in Ordinary English",
bookTitle="Approaches to Natural Language: Proceedings of the 1970 Stanford Workshop on Grammar and Semantics",
year="1973",
publisher="Springer Netherlands",
address="Dordrecht",
pages="221--242",
abstract="The aim of this paper is to present in a rigorous way the syntax and semantics of a certain fragment of a certain dialect of English. For expository purposes the fragment has been made as simple and restricted as it can be while accommodating all the more puzzling cases of quantification and reference with which I am acquainted.1",
isbn="978-94-010-2506-5",
doi="10.1007/978-94-010-2506-5_10",
url="https://doi.org/10.1007/978-94-010-2506-5_10"
}

@InProceedings{luoCNs,
author="Luo, Zhaohui",
editor="B{\'e}chet, Denis
and Dikovsky, Alexander",
title="Common Nouns as Types",
booktitle="Logical Aspects of Computational Linguistics",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="173--185",
abstract="When modern type theories are employed for formal semantics, common nouns (CNs) are interpreted as types, not as predicates. Although this brings about some technical advantages, it is worthwhile to ask: what is special about CNs that merits them to be interpreted as types? We discuss the observation made by Geach that, unlike other lexical categories, CNs have criteria of identity, a component of meaning that makes it legitimate to compare, count and quantify. This is closely related to the notion of set (type) in constructive mathematics, where a set (type) is not given solely by specifying its objects, but together with an equality between its objects, and explains and justifies to some extent why types are used to interpret CNs in modern type theories. It is shown that, in order to faithfully interpret modified CNs as $\Sigma$-types so that the associated criteria of identity can be captured correctly, it is important to assume proof irrelevance in type theory. We shall also briefly discuss a proposal to interpret mass noun phrases as types in a uniform approach to the semantics of CNs.",
isbn="978-3-642-31262-5"
}

@book{theunivalentfoundationsprogram-homotopytypetheory-2013,
  title = {Homotopy Type Theory: Univalent Foundations of Mathematics},
  shorttitle = {Homotopy Type Theory},
  author = {{The Univalent foundations program} and {Institute for advanced study (Princeton}, N.J.)},
  year = {2013},
  annotation = {OCLC: 1028552960},
  language = {English}
}

@InProceedings{surveyLang,
author="Kaliszyk, Cezary
and Rabe, Florian",
editor="Benzm{\"u}ller, Christoph
and Miller, Bruce",
title="A Survey of Languages for Formalizing Mathematics",
booktitle="Intelligent Computer Mathematics",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="138--156",
abstract="In order to work with mathematical content in computer systems, it is necessary to represent it in formal languages. Ideally, these are supported by tools that verify the correctness of the content, allow computing with it, and produce human-readable documents. These goals are challenging to combine and state-of-the-art tools typically have to make difficult compromises.",
isbn="978-3-030-53518-6"
}

@misc{aarneHott,
author = {Aarne Ranta},
title = { Translating Homotopy Type Theory in Grammatical Framework },
publisher= { Stockholm Mathematics Seminar },
year = 2014
}


@book{frege79,
  author =    {Gottlob Frege},
  title =     {Begrisschrift},
  publisher = {Halle},
  year =      1879}

@book{Chomsky57,
  author = {Noam Chomsky},
  doi = {doi:10.1515/9783110218329},
  url = {https://doi.org/10.1515/9783110218329},
  title = {Syntactic Structures},
  year = {2009},
  publisher = {De Gruyter Mouton}
}

@book{ranta1994type,
  title={Type-theoretical Grammar},
  author={Ranta, A. and Ranta, D.P.A.},
  isbn={9780198538578},
  lccn={lc94038911},
  series={Indices (Claredon)},
  url={https://books.google.se/books?id=A5m13eGOcqYC},
  year={1994},
  publisher={Clarendon Press}
}

@misc{avigad2015mathematics,
      title={Mathematics and language}, 
      author={Jeremy Avigad},
      year={2015},
      eprint={1505.07238},
      archivePrefix={arXiv},
      primaryClass={math.HO}
}
